#+TITLE: Testing with Cassandra
#+AUTHOR:
#+DATE: Aug. 19, 2013
#+EMAIL: gregory.cooper@iovation.com
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: H:2
#+OPTIONS: reveal_centerxx:nil
#+REVEAL_HLEVEL: 2
#+REVEAL_THEMExx: sky 
#+REVEAL_THEMExx: serif 
#+REVEAL_THEMExx: night
#+REVEAL_THEME: solarized
#+REVEAL_THEMExx: moon
#+REVEAL_TRANS: fade
#+REVEAL_MARGINxx: 4.0
#+REVEAL_MAX_SCALExx: 0.4

#+BEGIN_NOTES
Notes here
#+END_NOTES

* Welcome
*** Who am I and what's my role?
*** How is Cassandra being used at iovation
- Several clusters
- Multiple data centers
- "Global" Replication factor of 3 with 1 per data center
/Low latency between data centers  make this interesting, but we have questions/


* Development Environment
- Maven centric
- Mockito is moderately used
- Jenkins (Hudson) continuous integration
- Frequent deployments
- Matching QA environment difficult
/Scale of data makes it hard/


* Cassandra Interaction
- Astyanax and some Pelops
- Interested in the binary driver
- 1.2.x has binary and Thrift
  /Each has an (on/off) toggle/
  - Heavily recommended for new clients
    (/Stopped short of deprecating it/)
  - Anyone migrated yet?
     

* Unit Testing
- Mockito heavy
- DAO driven
** Mockito Annotation
#+BEGIN_SRC
@RunWith(MockitoJUnitRunner.class)
public class CassandraDrsDaoUnitTest {
...

    CassandraDrsDao dao;
...
    
    @Mock
    PurgePolicyComponent policyComponent;
    
    @Mock
    private Keyspace patternStoreMock;
#+END_SRC
** Test DAO w/o Persistence
#+BEGIN_SRC
...

    @Before
    public void setup() throws Exception {
...
        dao  = new CassandraDrsDao();
...

   @Test
    public void testReadExclusionListWithEmptyList() throws Exception {
        NuidSet nuidSet = new NuidSet();
        nuidSet.addNuid("nuid1", "value");
...
        ColumnFamilyQuery cfQueryMock = mock(ColumnFamilyQuery.class);
        RowSliceQuery     rsQueryMock = mock(RowSliceQuery.class);
...
        when(rsQueryMock.withColumnSlice(exlucsionColNames)).thenReturn(rsQueryMock);
        when(rsQueryMock.execute()).thenReturn(resultMock);
...        
        dao.readNuidExclusion(nuidSigs, nuidSet);
        verify(exclusionStoreMock, never()).prepareQuery(eq(exclusionColumnFamily));
        assertNotNull(nuidSet.getNuid("nuid1"));
    }
#+END_SRC
   

* Integration testing
- Testing at a functional level
- Using running Cassandra instance

* Different Approaches
- Maven plugin
- Embedded instance

* Maven plugin
- Configure your pom
- Running Cassandra instance "just available"
** POM Setup
#+BEGIN_SRC
    <build>
        <plugins>
            ...
            <plugin>
                <groupId>com.iovation.maven</groupId>
                <artifactId>maven-cassandra-plugin</artifactId>
                <version>1.0.1-SNAPSHOT</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>cassandra-start</goal>
                            <goal>cassandra-stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.0</version>
                <configuration>
                    <warName>service</warName>
                </configuration>
            </plugin>
        </plugins>
    </build>
#+END_SRC


* Embedded approach
-  Jeremy Sevellec's approach for embedding
Easy to control initial setup and data loading.
* POM Dependency
#+BEGIN_SRC
        <dependency>
            <groupId>org.cassandraunit</groupId>
            <artifactId>cassandra-unit</artifactId>
            <version>1.1.0.1</version>
            <scope>test</scope>
        </dependency>
#+END_SRC
* Setup and Data load
#+BEGIN_SRC
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext
@ActiveProfiles(profiles = "test")
@ContextConfiguration(classes = {TestPropertyConfiguration.class, DaoConfig.class, CassandraDemandConfiguration.class})
public class TlmArchiveTtlTest {

    @Resource(name = "tlmArchiveTtl")
    private TlmArchiveTtl tlmArchiveTtl;

    @BeforeClass
    public static void setUp() throws Exception {
        // This MUST be fired up before the spring context is created.
        EmbeddedCassandraServerHelper.startEmbeddedCassandra("tatestcassandra.yaml");
        DataLoader dataLoader = new DataLoader("TestCluster", "localhost:9172");
        dataLoader.load(new ClassPathJsonDataSet("clustertestdata.json"));

        dataLoader.load(new ClassPathJsonDataSet("drsindextestdata.json"));
    }
...
#+END_SRC
* Actual Test
#+BEGIN_SRC
    @Test
    public void testReadWriteSimpleText() throws Exception {
        String testData = "... (omitted json representing transaction here) ...";
        verifyData(testData);
    }

    private void verifyData(String data) throws Exception {
        TlmArchiveRecord record = new TlmArchiveRecordImpl();
        record.setData(data);

        long testTime = System.currentTimeMillis();
        String uuid = UUID.randomUUID().toString();
        TlmArchiveKey key = new TlmArchiveKeyImpl(testTime, uuid);
        record.setTlmArchiveKey(key);

        tlmArchiveWriter.writeRecord(record);
        assertNotNull(record.getTlmArchiveKey());
        TlmArchiveKey savedKey = record.getTlmArchiveKey();

        TlmArchiveRecord r2 = tlmArchiveReader.readRecord(savedKey);
        assertEquals(data, r2.getData());
    }
#+END_SRC
* "Long running" trick
#+BEGIN_SRC
    /**
     * Most of the time taken on this comes from killing 3650 column families which take about 1200ms each.
     * So killing 10 years of column families takes about an hour.
     * <p/>
     * Creating the column families isn't especially fast either, about 600ms each - so creating 3650 column families
     * and inserting 87672 records takes about 30 minutes.
     */
    @Test
    public void testTenYearsOfDataOneMessageAnHour() throws Exception {
        assumeTrue(wantLongRunningTests);
        DateTime startDateTime = new DateTime(1980, 1, 1, 0, 0, 0, 0);
        DateTime endDateTime = new DateTime(1989, 12, 31, 23, 59, 59, 999);

        // the one makes it easy to compare message count to time:
        // the 1234th message will have the last 4 digits of the ms time be 1234
        // and the formatted time will end in 01,234
        int period = 60 * 60 * 1000 + 1;

        verifyInsertRead(startDateTime, endDateTime, period, false);
    }
#+END_SRC
The 'assumeTrue' is the key here

* System and Cassandra testing
- Large scale

  QA as close to production as possible.
- Small scale

  More like general 'cassandra' testing with a cluster.
- Current Efforts

* Large Scale Details
- Automated teardown and restart

  Around an hour for 24 node cluster
- Some automated, mostly Manual validation
- Very service/application specific.
- Great for load testing and capacity planning.
- A level of confidence before deployment

* Small Scale Details
- Library for cluster spin up and destroying (could be used interactively)

  /Touches realm of puppet, chef, juju charms, etc...(but 100% JVM based)/
- Proving our Cassandra assumptions
 - Do our procedures for node replacement do what is expected?
 - When we upgrade Cassandra are our expectations still met?
 - How does Cassandra behave when we have a corrupted SSTable. Can we make a change?
- Currently 'generic', not iovation service specific
- Could be used for integration testing in services
 

* Cool things
- Github pages
  
  Great way to serve static html pages for free!
  - Jekyll support for html generation
- Org-reveal /for emacs org-mode nerds/
  - "Source code" for this reveal.js presentation in 'org-mode'

* Interesting link references
- [[http://mojo.codehaus.org/cassandra-maven-plugin/][Maven Cassandra Testing]]
- [[https://github.com/jsevellec/cassandra-unit][Embedded Cassandra Testing Library]]
- [[https://github.com/Netflix/astyanax][Astyanax Client]]
- [[http://pages.github.com/][GitHub Pages]]
- [[http://www.planetcassandra.org/blog/post/iovation-chooses-cassandra-for-predictable-cost-growth-and-scalability][Iovation and Cassandra]]

- [[http://lab.hakim.se/reveal-js/#/][reveal.js]]
- [[http://orgmode.org/][Org-Mode]] and [[https://github.com/yjwen/org-reveal][Org-Reveal]]

* Questions/Next meeting
- What should we do next?
- Discussion/Volunteers?
- Want to fiddle with github pages?
- Speakers?  Topics


* Thank you
